"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ

BASE_DIR = Path(__file__).resolve().parent.parent

# Inicializar
env = environ.Env()

# Leer archivo .env si existe
# Cargar variables de entorno desde .env
env_file = BASE_DIR / '.env'
if env_file.exists():
    print(f"✅ Cargando variables de entorno desde: {env_file}")
    environ.Env.read_env(env_file)
else:
    print(f"❌ ADVERTENCIA: No se encontró {env_file}. Asegúrate de crearlo.")
#railway app
# ----------------------------------------------------------
# CARGAR VARIABLES DE ENTORNO SEGÚN EL AMBIENTE
# ----------------------------------------------------------

# Detectar si estamos en Railway (Railway define RAILWAY_ENVIRONMENT)
#RAILWAY_ENV = os.getenv('RAILWAY_ENVIRONMENT') is not None
'''
if RAILWAY_ENV:
    # En Railway, cargar .env si existe (opcional, normalmente las variables ya están en el entorno)
    env_file = os.path.join(BASE_DIR, '.env')
    if os.path.exists(env_file):
        print(f"✅ Cargando variables de entorno desde: {env_file} (Railway)")
        environ.Env.read_env(env_file)
    else:
        print("ℹ️  Usando variables de entorno del sistema (Railway).")
else:
    # En local, cargar .env (que YA tienes)
    env_file = os.path.join(BASE_DIR, '.env')
    if os.path.exists(env_file):
        print(f"✅ Cargando variables de entorno desde: {env_file} (Local)")
        environ.Env.read_env(env_file)
    else:
        print(f"❌ ADVERTENCIA: No se encontró {env_file}. Usando variables del sistema.")
'''

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '910CWYyrnpJnjlVdUGmS5IZ8SSyGPEJR3OhemaMrfM9zrv6KZ0Zu8VuIhQNe3Iwomd4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["127.0.0.1", "localhost", "ecommerce-latinshop.onrender.com"]


RENDER_EXTERNAL_HOSTNAME = env('RENDER_EXTERNAL_HOSTNAME', default=None)
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
else:
    ALLOWED_HOSTS.append("localhost")
    ALLOWED_HOSTS.append("127.0.0.1")

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'categorias',
    'auths',
    'tienda',
    'carrito',
    'api',
    'rest_framework',
    'pedidos',
    'paypal.standard.ipn',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    #'cuentas',
]
#perfecto!
# Google OAuth
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
        "APP": {
            "client_id": env("GOOGLE_CLIENT_ID"),
            "secret": env("GOOGLE_CLIENT_SECRET"),
            "key": ""
        }
    }
}

# --- Allauth Modern Configuration ---
SITE_ID = 1

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'categorias.context_processors.menu_links',
                'carrito.context_processors.contador_carrito',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'
AUTH_USER_MODEL = 'auths.Auth'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
      
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-eu'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

#UN SALUDO DEVS HASTAB PRONTO!
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'


STATICFILES_DIRS = [
    BASE_DIR / "ecommerce/static",
]
STATIC_ROOT = BASE_DIR / "static"

if not DEBUG:
    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
    # and renames the files with unique names for each version to support long-term caching
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#los archovos media
MEDIA_URL= '/media/'
MEDIA_ROOT= BASE_DIR /'media'

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.INFO: "",
    50: "critical",
}

#MI CONFIGURACION PARA VALIDAR LA CUENTA POR SMTP
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_HOST_USER =env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD=env('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS= env('EMAIL_USE_TLS')
DEFAULT_FROM_EMAIL=env('DEFAULT_FROM_EMAIL')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JAZZMIN_SETTINGS = {
    "site_title": "Panel de Administración",
    "site_header": "LatinShop",
    "site_brand": "LatinShop",
    "site_logo": "images/logo2.jpg",
    "welcome_sign": "Bienvenido A LatinShop",
    "copyright": "Codelatin 2025",
    "show_ui_builder": True,
    "theme": "solar",  # Solo define un theme
    "dark_mode_theme": "superhero",
}

#ajustes para paypal
PAYPAL_TEST=True
PAYPAL_RECEIVER_EMAIL= 'personalcodelatin@gmail.com'

SOCIALACCOUNT_LOGIN_ON_GET = True